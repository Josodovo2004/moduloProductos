name: Django Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Create directories on EC2 instance
        run: |
            ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "mkdir -p /home/ec2-user/.aws /home/ec2-user/app"
  
  

      - name: Copy files to EC2 instance
        run: |

          scp -o StrictHostKeyChecking=no -r * ec2-user@${{ secrets.EC2_IP }}:/home/ec2-user/app/

      - name: Connect to EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          set -e  # Exit immediately if a command exits with a non-zero status
          
          cd /home/ec2-user/app/
          
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user  # Add ec2-user to docker group
          else
              echo "Docker is already installed."
          fi

          if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose is not installed. Installing Docker Compose..."
              DOCKER_COMPOSE_VERSION=$(uname -s)-$(uname -m)
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$DOCKER_COMPOSE_VERSION" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          else
              echo "Docker Compose is already installed."
          fi
          
          
          # Write config file for AWS CLI
          cat <<EOT > /home/ec2-user/.aws/config
          [default]
          region=us-east-1
          output=json
          EOT
          
          # Write credentials file for AWS CLI
          cat <<EOT > /home/ec2-user/.aws/credentials
          [default]
          aws_access_key_id=AKIA3FLD4NWO5MSFCW5I
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOT
          
          # Stop and remove old containers
          sudo docker-compose down
          
          # Build and start containers
          sudo docker-compose up -d --build
          exit
          EOF
